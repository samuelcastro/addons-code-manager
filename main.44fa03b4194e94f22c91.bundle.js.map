{"version":3,"file":"main.44fa03b4194e94f22c91.bundle.js","sources":["webpack:///./src/reducers/users.tsx"],"sourcesContent":["import { Reducer } from 'redux';\nimport { ActionType, createAction, getType } from 'typesafe-actions';\nimport log from 'loglevel';\n\nimport { ThunkActionCreator } from '../configureStore';\nimport { getCurrentUser, isErrorResponse, logOutFromServer } from '../api';\n\ntype UserId = number;\n\nexport type ExternalUser = {\n  average_addon_rating: number;\n  biography: string | null;\n  created: string;\n  has_anonymous_display_name: boolean;\n  has_anonymous_username: boolean;\n  homepage: string | null;\n  id: UserId;\n  is_addon_developer: boolean;\n  is_artist: boolean;\n  location: string | null;\n  name: string;\n  num_addons_listed: number;\n  occupation: string | null;\n  picture_type: string | null;\n  picture_url: string | null;\n  username: string;\n  // Properties returned if we are accessing our own profile or the current user\n  // has the `Users:Edit` permission.\n  deleted?: boolean;\n  display_name: string | null;\n  email?: string;\n  fxa_edit_email_url?: string;\n  is_verified?: boolean;\n  last_login?: string;\n  last_login_ip?: string;\n  permissions?: string[];\n  read_dev_agreement?: boolean;\n};\n\nexport type User = {\n  id: UserId;\n  name: string;\n  email?: string;\n  permissions?: string[];\n};\n\nexport const actions = {\n  abortFetchCurrentUser: createAction('ABORT_FETCH_CURRENT_USER'),\n  beginFetchCurrentUser: createAction('BEGIN_FETCH_CURRENT_USER'),\n  loadCurrentUser: createAction('LOAD_CURRENT_USER', (resolve) => {\n    return (payload: { user: ExternalUser }) => resolve(payload);\n  }),\n  logOut: createAction('LOG_OUT'),\n};\n\nexport const requestLogOut = ({\n  _logOutFromServer = logOutFromServer,\n} = {}): ThunkActionCreator => {\n  return async (dispatch, getState) => {\n    await _logOutFromServer(getState().api);\n    dispatch(actions.logOut());\n  };\n};\n\nexport type UsersState = {\n  currentUser: User | null | undefined;\n};\n\nexport const initialState: UsersState = {\n  currentUser: null,\n};\n\nexport const createInternalUser = (user: ExternalUser): User => {\n  return {\n    email: user.email,\n    id: user.id,\n    name: user.name,\n    permissions: user.permissions,\n  };\n};\n\nexport const selectCurrentUser = (users: UsersState) => {\n  return users.currentUser || null;\n};\n\nexport const currentUserIsLoading = (users: UsersState) => {\n  return users.currentUser === undefined;\n};\n\nexport const fetchCurrentUser = ({\n  _getCurrentUser = getCurrentUser,\n  _log = log,\n} = {}): ThunkActionCreator => {\n  return async (dispatch, getState) => {\n    const { api: apiState } = getState();\n    dispatch(actions.beginFetchCurrentUser());\n\n    const response = await _getCurrentUser(apiState);\n\n    if (isErrorResponse(response)) {\n      _log.error(`TODO: handle this error response: ${response.error}`);\n      dispatch(actions.abortFetchCurrentUser());\n    } else {\n      dispatch(actions.loadCurrentUser({ user: response }));\n    }\n  };\n};\n\nconst reducer: Reducer<UsersState, ActionType<typeof actions>> = (\n  state = initialState,\n  action,\n): UsersState => {\n  switch (action.type) {\n    case getType(actions.beginFetchCurrentUser):\n      return {\n        ...state,\n        currentUser: undefined,\n      };\n    case getType(actions.abortFetchCurrentUser):\n      return {\n        ...state,\n        currentUser: initialState.currentUser,\n      };\n    case getType(actions.loadCurrentUser):\n      return {\n        ...state,\n        currentUser: createInternalUser(action.payload.user),\n      };\n    case getType(actions.logOut):\n      return {\n        ...state,\n        currentUser: null,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"],"mappings":"AA8CA","sourceRoot":""}